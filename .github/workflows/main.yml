name: App Builder

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      releaseTag:
        description: "Release tag"
        required: true
        default: "v1.0.0"
        type: string

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        include:
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

        # node
      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x.x

      - name: Node.js setup
        uses: actions/setup-node@v3
        # NOTE: enterprise developers may hard code a version
        with:
          node-version: 20.x.x
          # node-version-file: '.nvmrc'

      - name: Install Rust (Stable)
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y

      - name: Install app dependencies and build web
        # NOTE: include yarn build if frontend has build script
        run: pnpm install --frozen-lockfile # && yarn build

      - name: Build app
        run: pnpm build

      - name: Check if release already exists
        id: check_release
        shell: bash
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ inputs.releaseTag || github.ref_name }})
          if [[ $response == 200 ]]; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release if it doesn't exist
        uses: "marvinpinto/action-automatic-releases@latest"
        if: steps.check_release.outputs.release_exists == 'false'
        with:
          title: "Release ${{ inputs.releaseTag || github.ref_name }}"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            client/src-tauri/target/release/bundle/msi/Windmill_1.0.0_x64_en-US.msi

      - name: Upload build to release if it exists
        uses: svenstaro/upload-release-action@v2
        if: steps.check_release.outputs.release_exists == 'true'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: client/src-tauri/target/release/bundle/msi/Windmill_1.0.0_x64_en-US.msi
          tag: ${{ inputs.releaseTag || github.ref_name }}
